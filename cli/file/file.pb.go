// Code generated by protoc-gen-go.
// source: file.proto
// DO NOT EDIT!

package file

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TransferCommand int32

const (
	TransferCommand_INIT  TransferCommand = 0
	TransferCommand_PAUSE TransferCommand = 1
	TransferCommand_CLOSE TransferCommand = 2
)

var TransferCommand_name = map[int32]string{
	0: "INIT",
	1: "PAUSE",
	2: "CLOSE",
}
var TransferCommand_value = map[string]int32{
	"INIT":  0,
	"PAUSE": 1,
	"CLOSE": 2,
}

func (x TransferCommand) String() string {
	return proto.EnumName(TransferCommand_name, int32(x))
}
func (TransferCommand) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type FileStore struct {
	Name             string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	TotalSpace       int64           `protobuf:"varint,2,opt,name=total_space,json=totalSpace" json:"total_space,omitempty"`
	UnallocatedSpace int64           `protobuf:"varint,3,opt,name=unallocated_space,json=unallocatedSpace" json:"unallocated_space,omitempty"`
	UsableSpace      int64           `protobuf:"varint,4,opt,name=usable_space,json=usableSpace" json:"usable_space,omitempty"`
	Url              *FileStoreURL   `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Extra            *FileStoreExtra `protobuf:"bytes,6,opt,name=extra" json:"extra,omitempty"`
}

func (m *FileStore) Reset()                    { *m = FileStore{} }
func (m *FileStore) String() string            { return proto.CompactTextString(m) }
func (*FileStore) ProtoMessage()               {}
func (*FileStore) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FileStore) GetUrl() *FileStoreURL {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *FileStore) GetExtra() *FileStoreExtra {
	if m != nil {
		return m.Extra
	}
	return nil
}

type FileStoreURL struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *FileStoreURL) Reset()                    { *m = FileStoreURL{} }
func (m *FileStoreURL) String() string            { return proto.CompactTextString(m) }
func (*FileStoreURL) ProtoMessage()               {}
func (*FileStoreURL) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type FileStoreExtra struct {
}

func (m *FileStoreExtra) Reset()                    { *m = FileStoreExtra{} }
func (m *FileStoreExtra) String() string            { return proto.CompactTextString(m) }
func (*FileStoreExtra) ProtoMessage()               {}
func (*FileStoreExtra) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type Path struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type File struct {
	FileStoreUrl *FileStoreURL `protobuf:"bytes,100,opt,name=file_store_url,json=fileStoreUrl" json:"file_store_url,omitempty"`
	Name         string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path         *Path         `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Size         int64         `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Checksum     []byte        `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Uuid         string        `protobuf:"bytes,5,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *File) GetFileStoreUrl() *FileStoreURL {
	if m != nil {
		return m.FileStoreUrl
	}
	return nil
}

func (m *File) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

type FileBlock struct {
	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *FileBlock) Reset()                    { *m = FileBlock{} }
func (m *FileBlock) String() string            { return proto.CompactTextString(m) }
func (*FileBlock) ProtoMessage()               {}
func (*FileBlock) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type Token struct {
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type ListResponse struct {
	Error *FileSystemError `protobuf:"bytes,100,opt,name=error" json:"error,omitempty"`
	Name  []string         `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ListResponse) GetError() *FileSystemError {
	if m != nil {
		return m.Error
	}
	return nil
}

type CopyRequest struct {
	Src  *Path `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dest *Path `protobuf:"bytes,2,opt,name=dest" json:"dest,omitempty"`
}

func (m *CopyRequest) Reset()                    { *m = CopyRequest{} }
func (m *CopyRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyRequest) ProtoMessage()               {}
func (*CopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *CopyRequest) GetSrc() *Path {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *CopyRequest) GetDest() *Path {
	if m != nil {
		return m.Dest
	}
	return nil
}

type CopyResponse struct {
	Error *FileSystemError `protobuf:"bytes,100,opt,name=error" json:"error,omitempty"`
}

func (m *CopyResponse) Reset()                    { *m = CopyResponse{} }
func (m *CopyResponse) String() string            { return proto.CompactTextString(m) }
func (*CopyResponse) ProtoMessage()               {}
func (*CopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *CopyResponse) GetError() *FileSystemError {
	if m != nil {
		return m.Error
	}
	return nil
}

type MoveRequest struct {
	Src  *Path `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dest *Path `protobuf:"bytes,2,opt,name=dest" json:"dest,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *MoveRequest) GetSrc() *Path {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MoveRequest) GetDest() *Path {
	if m != nil {
		return m.Dest
	}
	return nil
}

type MoveResponse struct {
	Error *FileSystemError `protobuf:"bytes,100,opt,name=error" json:"error,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *MoveResponse) GetError() *FileSystemError {
	if m != nil {
		return m.Error
	}
	return nil
}

type DeleteResponse struct {
	Error *FileSystemError `protobuf:"bytes,100,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *DeleteResponse) GetError() *FileSystemError {
	if m != nil {
		return m.Error
	}
	return nil
}

type CreateDirectoryResponse struct {
	Error *FileSystemError `protobuf:"bytes,100,opt,name=error" json:"error,omitempty"`
}

func (m *CreateDirectoryResponse) Reset()                    { *m = CreateDirectoryResponse{} }
func (m *CreateDirectoryResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDirectoryResponse) ProtoMessage()               {}
func (*CreateDirectoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *CreateDirectoryResponse) GetError() *FileSystemError {
	if m != nil {
		return m.Error
	}
	return nil
}

type CreateFileMetaResponse struct {
	Error *FileSystemError `protobuf:"bytes,100,opt,name=error" json:"error,omitempty"`
	File  *File            `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *CreateFileMetaResponse) Reset()                    { *m = CreateFileMetaResponse{} }
func (m *CreateFileMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateFileMetaResponse) ProtoMessage()               {}
func (*CreateFileMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *CreateFileMetaResponse) GetError() *FileSystemError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CreateFileMetaResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type GetFileMetaResponse struct {
	Error *FileSystemError `protobuf:"bytes,100,opt,name=error" json:"error,omitempty"`
	File  *File            `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *GetFileMetaResponse) Reset()                    { *m = GetFileMetaResponse{} }
func (m *GetFileMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*GetFileMetaResponse) ProtoMessage()               {}
func (*GetFileMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *GetFileMetaResponse) GetError() *FileSystemError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetFileMetaResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type PutFileResponse struct {
	Command TransferCommand `protobuf:"varint,100,opt,name=command,enum=file.TransferCommand" json:"command,omitempty"`
}

func (m *PutFileResponse) Reset()                    { *m = PutFileResponse{} }
func (m *PutFileResponse) String() string            { return proto.CompactTextString(m) }
func (*PutFileResponse) ProtoMessage()               {}
func (*PutFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type GetFileRequest struct {
	Command TransferCommand `protobuf:"varint,100,opt,name=command,enum=file.TransferCommand" json:"command,omitempty"`
	Token   *Token          `protobuf:"bytes,99,opt,name=token" json:"token,omitempty"`
	Uuid    []byte          `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetFileRequest) Reset()                    { *m = GetFileRequest{} }
func (m *GetFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileRequest) ProtoMessage()               {}
func (*GetFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GetFileRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type ControlledPacket struct {
	// Types that are valid to be assigned to Data:
	//	*ControlledPacket_FileToChap
	//	*ControlledPacket_FileBlock
	//	*ControlledPacket_Checksum
	//	*ControlledPacket_End
	Data isControlledPacket_Data `protobuf_oneof:"data"`
}

func (m *ControlledPacket) Reset()                    { *m = ControlledPacket{} }
func (m *ControlledPacket) String() string            { return proto.CompactTextString(m) }
func (*ControlledPacket) ProtoMessage()               {}
func (*ControlledPacket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type isControlledPacket_Data interface {
	isControlledPacket_Data()
}

type ControlledPacket_FileToChap struct {
	FileToChap *File `protobuf:"bytes,99,opt,name=file_to_chap,json=fileToChap,oneof"`
}
type ControlledPacket_FileBlock struct {
	FileBlock *FileBlock `protobuf:"bytes,1,opt,name=file_block,json=fileBlock,oneof"`
}
type ControlledPacket_Checksum struct {
	Checksum []byte `protobuf:"bytes,2,opt,name=checksum,proto3,oneof"`
}
type ControlledPacket_End struct {
	End bool `protobuf:"varint,3,opt,name=end,oneof"`
}

func (*ControlledPacket_FileToChap) isControlledPacket_Data() {}
func (*ControlledPacket_FileBlock) isControlledPacket_Data()  {}
func (*ControlledPacket_Checksum) isControlledPacket_Data()   {}
func (*ControlledPacket_End) isControlledPacket_Data()        {}

func (m *ControlledPacket) GetData() isControlledPacket_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ControlledPacket) GetFileToChap() *File {
	if x, ok := m.GetData().(*ControlledPacket_FileToChap); ok {
		return x.FileToChap
	}
	return nil
}

func (m *ControlledPacket) GetFileBlock() *FileBlock {
	if x, ok := m.GetData().(*ControlledPacket_FileBlock); ok {
		return x.FileBlock
	}
	return nil
}

func (m *ControlledPacket) GetChecksum() []byte {
	if x, ok := m.GetData().(*ControlledPacket_Checksum); ok {
		return x.Checksum
	}
	return nil
}

func (m *ControlledPacket) GetEnd() bool {
	if x, ok := m.GetData().(*ControlledPacket_End); ok {
		return x.End
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ControlledPacket) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ControlledPacket_OneofMarshaler, _ControlledPacket_OneofUnmarshaler, _ControlledPacket_OneofSizer, []interface{}{
		(*ControlledPacket_FileToChap)(nil),
		(*ControlledPacket_FileBlock)(nil),
		(*ControlledPacket_Checksum)(nil),
		(*ControlledPacket_End)(nil),
	}
}

func _ControlledPacket_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ControlledPacket)
	// data
	switch x := m.Data.(type) {
	case *ControlledPacket_FileToChap:
		b.EncodeVarint(99<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileToChap); err != nil {
			return err
		}
	case *ControlledPacket_FileBlock:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileBlock); err != nil {
			return err
		}
	case *ControlledPacket_Checksum:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Checksum)
	case *ControlledPacket_End:
		t := uint64(0)
		if x.End {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("ControlledPacket.Data has unexpected type %T", x)
	}
	return nil
}

func _ControlledPacket_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ControlledPacket)
	switch tag {
	case 99: // data.file_to_chap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(File)
		err := b.DecodeMessage(msg)
		m.Data = &ControlledPacket_FileToChap{msg}
		return true, err
	case 1: // data.file_block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileBlock)
		err := b.DecodeMessage(msg)
		m.Data = &ControlledPacket_FileBlock{msg}
		return true, err
	case 2: // data.checksum
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &ControlledPacket_Checksum{x}
		return true, err
	case 3: // data.end
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &ControlledPacket_End{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _ControlledPacket_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ControlledPacket)
	// data
	switch x := m.Data.(type) {
	case *ControlledPacket_FileToChap:
		s := proto.Size(x.FileToChap)
		n += proto.SizeVarint(99<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ControlledPacket_FileBlock:
		s := proto.Size(x.FileBlock)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ControlledPacket_Checksum:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Checksum)))
		n += len(x.Checksum)
	case *ControlledPacket_End:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FileStore)(nil), "file.FileStore")
	proto.RegisterType((*FileStoreURL)(nil), "file.FileStoreURL")
	proto.RegisterType((*FileStoreExtra)(nil), "file.FileStoreExtra")
	proto.RegisterType((*Path)(nil), "file.Path")
	proto.RegisterType((*File)(nil), "file.File")
	proto.RegisterType((*FileBlock)(nil), "file.FileBlock")
	proto.RegisterType((*Token)(nil), "file.Token")
	proto.RegisterType((*ListResponse)(nil), "file.ListResponse")
	proto.RegisterType((*CopyRequest)(nil), "file.CopyRequest")
	proto.RegisterType((*CopyResponse)(nil), "file.CopyResponse")
	proto.RegisterType((*MoveRequest)(nil), "file.MoveRequest")
	proto.RegisterType((*MoveResponse)(nil), "file.MoveResponse")
	proto.RegisterType((*DeleteResponse)(nil), "file.DeleteResponse")
	proto.RegisterType((*CreateDirectoryResponse)(nil), "file.CreateDirectoryResponse")
	proto.RegisterType((*CreateFileMetaResponse)(nil), "file.CreateFileMetaResponse")
	proto.RegisterType((*GetFileMetaResponse)(nil), "file.GetFileMetaResponse")
	proto.RegisterType((*PutFileResponse)(nil), "file.PutFileResponse")
	proto.RegisterType((*GetFileRequest)(nil), "file.GetFileRequest")
	proto.RegisterType((*ControlledPacket)(nil), "file.ControlledPacket")
	proto.RegisterEnum("file.TransferCommand", TransferCommand_name, TransferCommand_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for FileSystem service

type FileSystemClient interface {
	List(ctx context.Context, in *Path, opts ...grpc.CallOption) (*ListResponse, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	CreateDirectory(ctx context.Context, in *Path, opts ...grpc.CallOption) (*CreateDirectoryResponse, error)
	Delete(ctx context.Context, in *Path, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeleteIfExists(ctx context.Context, in *Path, opts ...grpc.CallOption) (*DeleteResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	CreateFileMeta(ctx context.Context, in *File, opts ...grpc.CallOption) (*CreateFileMetaResponse, error)
	GetFileMeta(ctx context.Context, in *Path, opts ...grpc.CallOption) (*GetFileMetaResponse, error)
	RequestAccessToken(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Token, error)
}

type fileSystemClient struct {
	cc *grpc.ClientConn
}

func NewFileSystemClient(cc *grpc.ClientConn) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) List(ctx context.Context, in *Path, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/Copy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) CreateDirectory(ctx context.Context, in *Path, opts ...grpc.CallOption) (*CreateDirectoryResponse, error) {
	out := new(CreateDirectoryResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/CreateDirectory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) Delete(ctx context.Context, in *Path, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) DeleteIfExists(ctx context.Context, in *Path, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/DeleteIfExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) CreateFileMeta(ctx context.Context, in *File, opts ...grpc.CallOption) (*CreateFileMetaResponse, error) {
	out := new(CreateFileMetaResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/CreateFileMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) GetFileMeta(ctx context.Context, in *Path, opts ...grpc.CallOption) (*GetFileMetaResponse, error) {
	out := new(GetFileMetaResponse)
	err := grpc.Invoke(ctx, "/file.FileSystem/GetFileMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) RequestAccessToken(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/file.FileSystem/RequestAccessToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileSystem service

type FileSystemServer interface {
	List(context.Context, *Path) (*ListResponse, error)
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	CreateDirectory(context.Context, *Path) (*CreateDirectoryResponse, error)
	Delete(context.Context, *Path) (*DeleteResponse, error)
	DeleteIfExists(context.Context, *Path) (*DeleteResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	CreateFileMeta(context.Context, *File) (*CreateFileMetaResponse, error)
	GetFileMeta(context.Context, *Path) (*GetFileMetaResponse, error)
	RequestAccessToken(context.Context, *Path) (*Token, error)
}

func RegisterFileSystemServer(s *grpc.Server, srv FileSystemServer) {
	s.RegisterService(&_FileSystem_serviceDesc, srv)
}

func _FileSystem_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).List(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/CreateDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).CreateDirectory(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Delete(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_DeleteIfExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).DeleteIfExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/DeleteIfExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).DeleteIfExists(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_CreateFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).CreateFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/CreateFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).CreateFileMeta(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_GetFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).GetFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/GetFileMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).GetFileMeta(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_RequestAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).RequestAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileSystem/RequestAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).RequestAccessToken(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileSystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FileSystem_List_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FileSystem_Copy_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _FileSystem_CreateDirectory_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileSystem_Delete_Handler,
		},
		{
			MethodName: "DeleteIfExists",
			Handler:    _FileSystem_DeleteIfExists_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FileSystem_Move_Handler,
		},
		{
			MethodName: "CreateFileMeta",
			Handler:    _FileSystem_CreateFileMeta_Handler,
		},
		{
			MethodName: "GetFileMeta",
			Handler:    _FileSystem_GetFileMeta_Handler,
		},
		{
			MethodName: "RequestAccessToken",
			Handler:    _FileSystem_RequestAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

// Client API for FileStoreDevice service

type FileStoreDeviceClient interface {
	PutFile(ctx context.Context, opts ...grpc.CallOption) (FileStoreDevice_PutFileClient, error)
	GetFile(ctx context.Context, opts ...grpc.CallOption) (FileStoreDevice_GetFileClient, error)
}

type fileStoreDeviceClient struct {
	cc *grpc.ClientConn
}

func NewFileStoreDeviceClient(cc *grpc.ClientConn) FileStoreDeviceClient {
	return &fileStoreDeviceClient{cc}
}

func (c *fileStoreDeviceClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (FileStoreDevice_PutFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FileStoreDevice_serviceDesc.Streams[0], c.cc, "/file.FileStoreDevice/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStoreDevicePutFileClient{stream}
	return x, nil
}

type FileStoreDevice_PutFileClient interface {
	Send(*ControlledPacket) error
	Recv() (*PutFileResponse, error)
	grpc.ClientStream
}

type fileStoreDevicePutFileClient struct {
	grpc.ClientStream
}

func (x *fileStoreDevicePutFileClient) Send(m *ControlledPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStoreDevicePutFileClient) Recv() (*PutFileResponse, error) {
	m := new(PutFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStoreDeviceClient) GetFile(ctx context.Context, opts ...grpc.CallOption) (FileStoreDevice_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FileStoreDevice_serviceDesc.Streams[1], c.cc, "/file.FileStoreDevice/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStoreDeviceGetFileClient{stream}
	return x, nil
}

type FileStoreDevice_GetFileClient interface {
	Send(*GetFileRequest) error
	Recv() (*ControlledPacket, error)
	grpc.ClientStream
}

type fileStoreDeviceGetFileClient struct {
	grpc.ClientStream
}

func (x *fileStoreDeviceGetFileClient) Send(m *GetFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStoreDeviceGetFileClient) Recv() (*ControlledPacket, error) {
	m := new(ControlledPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FileStoreDevice service

type FileStoreDeviceServer interface {
	PutFile(FileStoreDevice_PutFileServer) error
	GetFile(FileStoreDevice_GetFileServer) error
}

func RegisterFileStoreDeviceServer(s *grpc.Server, srv FileStoreDeviceServer) {
	s.RegisterService(&_FileStoreDevice_serviceDesc, srv)
}

func _FileStoreDevice_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStoreDeviceServer).PutFile(&fileStoreDevicePutFileServer{stream})
}

type FileStoreDevice_PutFileServer interface {
	Send(*PutFileResponse) error
	Recv() (*ControlledPacket, error)
	grpc.ServerStream
}

type fileStoreDevicePutFileServer struct {
	grpc.ServerStream
}

func (x *fileStoreDevicePutFileServer) Send(m *PutFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStoreDevicePutFileServer) Recv() (*ControlledPacket, error) {
	m := new(ControlledPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileStoreDevice_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStoreDeviceServer).GetFile(&fileStoreDeviceGetFileServer{stream})
}

type FileStoreDevice_GetFileServer interface {
	Send(*ControlledPacket) error
	Recv() (*GetFileRequest, error)
	grpc.ServerStream
}

type fileStoreDeviceGetFileServer struct {
	grpc.ServerStream
}

func (x *fileStoreDeviceGetFileServer) Send(m *ControlledPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStoreDeviceGetFileServer) Recv() (*GetFileRequest, error) {
	m := new(GetFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileStoreDevice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileStoreDevice",
	HandlerType: (*FileStoreDeviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutFile",
			Handler:       _FileStoreDevice_PutFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FileStoreDevice_GetFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("file.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0xef, 0x6e, 0x1b, 0x45,
	0x10, 0xf7, 0xc5, 0xe7, 0x24, 0x1e, 0x5b, 0xb6, 0xbb, 0x84, 0x36, 0x58, 0x69, 0x49, 0x4e, 0x08,
	0x45, 0x41, 0x09, 0xc5, 0x20, 0x84, 0x28, 0x7c, 0xa8, 0x1d, 0x97, 0x44, 0xa4, 0xd4, 0xda, 0xa4,
	0x9f, 0xad, 0xcd, 0x79, 0x2c, 0x5b, 0x39, 0xdf, 0x9a, 0xdb, 0x75, 0x95, 0xf2, 0x0c, 0x3c, 0x0b,
	0x9f, 0x79, 0x0d, 0x5e, 0x81, 0x27, 0x41, 0x33, 0x7b, 0xe7, 0xdc, 0x99, 0x44, 0x02, 0x0b, 0xbe,
	0xcd, 0xcd, 0xfc, 0xe6, 0xef, 0xee, 0x6f, 0xf6, 0x00, 0xc6, 0xd3, 0x08, 0x4f, 0xe6, 0x89, 0xb6,
	0x5a, 0xf8, 0x24, 0xb7, 0xeb, 0x98, 0x24, 0x3a, 0x31, 0x4e, 0x17, 0xfc, 0xe9, 0x41, 0xf5, 0xd5,
	0x34, 0xc2, 0x4b, 0xab, 0x13, 0x14, 0x02, 0xfc, 0x58, 0xcd, 0x70, 0xd7, 0xdb, 0xf7, 0x0e, 0xab,
	0x92, 0x65, 0xf1, 0x31, 0xd4, 0xac, 0xb6, 0x2a, 0x1a, 0x9a, 0xb9, 0x0a, 0x71, 0x77, 0x63, 0xdf,
	0x3b, 0x2c, 0x4b, 0x60, 0xd5, 0x25, 0x69, 0xc4, 0x67, 0xf0, 0x68, 0x11, 0xab, 0x28, 0xd2, 0xa1,
	0xb2, 0x38, 0x4a, 0x61, 0x65, 0x86, 0xb5, 0x72, 0x06, 0x07, 0x3e, 0x80, 0xfa, 0xc2, 0xa8, 0xeb,
	0x08, 0x53, 0x9c, 0xcf, 0xb8, 0x9a, 0xd3, 0x39, 0xc8, 0x27, 0x50, 0x5e, 0x24, 0xd1, 0x6e, 0x65,
	0xdf, 0x3b, 0xac, 0x75, 0xc4, 0x09, 0x37, 0xb0, 0x2c, 0xf1, 0xad, 0xbc, 0x90, 0x64, 0x16, 0x47,
	0x50, 0xc1, 0x5b, 0x9b, 0xa8, 0xdd, 0x4d, 0xc6, 0xed, 0xac, 0xe0, 0xfa, 0x64, 0x93, 0x0e, 0x12,
	0x7c, 0x0d, 0xf5, 0x7c, 0x00, 0x6a, 0x73, 0xa2, 0x8d, 0xcd, 0xda, 0x24, 0x99, 0x74, 0x73, 0x9d,
	0x58, 0xee, 0xaf, 0x22, 0x59, 0x0e, 0x5a, 0xd0, 0x28, 0x06, 0x0c, 0xda, 0xe0, 0x0f, 0x94, 0x9d,
	0x30, 0x5a, 0xd9, 0x49, 0x16, 0x81, 0xe4, 0xe0, 0x77, 0x0f, 0x7c, 0x82, 0x8b, 0x6f, 0xa0, 0x41,
	0xc5, 0x0c, 0x0d, 0xf9, 0x0d, 0xa9, 0x97, 0xd1, 0x83, 0xbd, 0xd4, 0xc7, 0xcb, 0xaf, 0x24, 0xba,
	0x77, 0xfe, 0xcf, 0xd2, 0x54, 0x1b, 0x1c, 0x03, 0x5c, 0x0c, 0x2a, 0xc2, 0xa5, 0x25, 0x1f, 0x33,
	0xfd, 0x25, 0x9b, 0x38, 0xcb, 0xa2, 0x0d, 0xdb, 0xe1, 0x04, 0xc3, 0x1b, 0xb3, 0x98, 0xf1, 0x84,
	0xeb, 0x72, 0xf9, 0x4d, 0xf8, 0xc5, 0x62, 0x3a, 0xe2, 0xf9, 0x56, 0x25, 0xcb, 0xc1, 0x81, 0xbb,
	0x04, 0xdd, 0x48, 0x87, 0x37, 0x62, 0x07, 0x2a, 0xd7, 0x24, 0x70, 0x15, 0x75, 0xe9, 0x3e, 0x82,
	0xa7, 0x50, 0xb9, 0xd2, 0x37, 0x18, 0x93, 0xd9, 0x92, 0x90, 0x99, 0xf9, 0x23, 0x78, 0x03, 0xf5,
	0x8b, 0xa9, 0xb1, 0x12, 0xcd, 0x5c, 0xc7, 0x86, 0x2e, 0x45, 0x85, 0xef, 0x59, 0xda, 0xfa, 0x87,
	0xb9, 0xd6, 0xdf, 0x1b, 0x8b, 0xb3, 0x3e, 0x19, 0xa5, 0xc3, 0xe4, 0xda, 0x2e, 0x67, 0x6d, 0x07,
	0x3f, 0x42, 0xad, 0xa7, 0xe7, 0xef, 0x25, 0xfe, 0xbc, 0x40, 0x63, 0xc5, 0x1e, 0x94, 0x4d, 0x12,
	0x72, 0xce, 0xe2, 0x10, 0x48, 0x4d, 0x33, 0x1a, 0xa1, 0xb1, 0xf7, 0xcd, 0x88, 0xf4, 0xc1, 0x0b,
	0xa8, 0xbb, 0x60, 0x6b, 0x54, 0x47, 0x95, 0xbc, 0xd6, 0xef, 0xf0, 0x3f, 0xab, 0xc4, 0x05, 0x5b,
	0xa7, 0x92, 0xef, 0xa1, 0x71, 0x8a, 0x11, 0xda, 0x35, 0xdd, 0x5f, 0xc1, 0x93, 0x5e, 0x82, 0xca,
	0xe2, 0xe9, 0x34, 0xc1, 0xd0, 0xea, 0x64, 0xcd, 0x81, 0x20, 0x3c, 0x76, 0x71, 0xc8, 0xfe, 0x1a,
	0xad, 0x5a, 0xef, 0xd4, 0x9f, 0x01, 0x2f, 0xa4, 0xe2, 0x24, 0x09, 0x2b, 0x59, 0x1f, 0x5c, 0xc3,
	0x07, 0x3f, 0xa0, 0xfd, 0x7f, 0x73, 0x74, 0xa1, 0x39, 0x58, 0x70, 0x8e, 0x65, 0xfc, 0xcf, 0x61,
	0x2b, 0xd4, 0xb3, 0x99, 0x8a, 0x47, 0x9c, 0xa1, 0x91, 0x65, 0xb8, 0x4a, 0x54, 0x6c, 0xc6, 0x98,
	0xf4, 0x9c, 0x51, 0x66, 0xa8, 0xe0, 0x16, 0x1a, 0x69, 0x9d, 0xd9, 0x15, 0xf9, 0xb7, 0x21, 0xc4,
	0x41, 0xc6, 0xa9, 0x90, 0xeb, 0xac, 0xa5, 0x70, 0x52, 0xa5, 0x04, 0x5b, 0xd2, 0x76, 0x83, 0x59,
	0xe7, 0x68, 0xfb, 0x9b, 0x07, 0xad, 0x9e, 0x8e, 0x6d, 0xa2, 0xa3, 0x08, 0x47, 0x03, 0x15, 0xde,
	0xa0, 0x15, 0x27, 0xc0, 0x3b, 0x65, 0x68, 0xf5, 0x30, 0x9c, 0xa8, 0x79, 0x1a, 0x32, 0xd7, 0xfa,
	0x59, 0x49, 0xf2, 0xab, 0x70, 0xa5, 0x7b, 0x13, 0x35, 0x17, 0xcf, 0xdd, 0x1b, 0x31, 0xbc, 0xe3,
	0x7c, 0xad, 0xd3, 0xbc, 0x43, 0xf3, 0x4e, 0x38, 0x2b, 0xc9, 0xea, 0x78, 0xb9, 0x20, 0xf6, 0x72,
	0xdb, 0x85, 0xcb, 0x39, 0x2b, 0x15, 0xf6, 0x4b, 0x19, 0xe3, 0x11, 0xaf, 0xa3, 0xed, 0xb3, 0x92,
	0xa4, 0x8f, 0xee, 0x26, 0xf8, 0x23, 0x65, 0xd5, 0xd1, 0x17, 0xd0, 0x5c, 0x99, 0x81, 0xd8, 0x06,
	0xff, 0xfc, 0xa7, 0xf3, 0xab, 0x56, 0x49, 0x54, 0xa1, 0x32, 0x78, 0xf9, 0xf6, 0xb2, 0xdf, 0xf2,
	0x48, 0xec, 0x5d, 0xbc, 0xb9, 0xec, 0xb7, 0x36, 0x3a, 0x7f, 0x94, 0x01, 0xee, 0x0e, 0x57, 0x7c,
	0x0a, 0x3e, 0xed, 0x19, 0x91, 0x63, 0x56, 0x3b, 0xdd, 0xab, 0x85, 0xfd, 0x73, 0x0c, 0x3e, 0x31,
	0x5e, 0x3c, 0x72, 0xb6, 0xdc, 0x2a, 0xc9, 0xe0, 0x85, 0x85, 0xf0, 0x1d, 0x34, 0x57, 0xa8, 0x51,
	0xc8, 0xf0, 0x34, 0x75, 0x79, 0x80, 0x3d, 0x47, 0xb0, 0xe9, 0x78, 0x59, 0x70, 0x4a, 0x9f, 0xa4,
	0x15, 0xc6, 0x76, 0x32, 0x0e, 0x9f, 0x8f, 0xfb, 0xb7, 0x53, 0x63, 0xcd, 0x3f, 0xf0, 0x39, 0x06,
	0x9f, 0x96, 0x46, 0xd6, 0x4c, 0x6e, 0x1b, 0x65, 0xcd, 0x14, 0x76, 0xca, 0xb7, 0xd0, 0x28, 0xf2,
	0x53, 0xe4, 0x4e, 0xbf, 0xbd, 0x97, 0xef, 0xe5, 0x6f, 0xec, 0xfa, 0x0a, 0x6a, 0x39, 0xd2, 0x15,
	0x6a, 0xfb, 0xc8, 0xc9, 0xf7, 0x71, 0xf2, 0x18, 0x44, 0x5a, 0xd0, 0xcb, 0x30, 0x44, 0x63, 0xdc,
	0x4b, 0x91, 0x77, 0xce, 0x5f, 0xe9, 0xce, 0xaf, 0x1e, 0x34, 0x97, 0xaf, 0xe0, 0x29, 0xbe, 0x9b,
	0x86, 0x74, 0x02, 0x5b, 0x29, 0x13, 0xc5, 0xe3, 0xec, 0x80, 0x8a, 0x37, 0xbb, 0x9d, 0xb2, 0x68,
	0x85, 0xb0, 0x87, 0xde, 0x73, 0x4f, 0xbc, 0x80, 0xad, 0xb4, 0x2e, 0xb1, 0x53, 0x28, 0x33, 0x9b,
	0xd3, 0x03, 0x31, 0xc9, 0xb9, 0xfb, 0x04, 0xb6, 0x63, 0xb4, 0x0c, 0xe8, 0xf2, 0x3b, 0x38, 0xa0,
	0x5f, 0xa3, 0x81, 0x77, 0xbd, 0xc9, 0xff, 0x48, 0x5f, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x37,
	0x77, 0x83, 0x6e, 0x45, 0x09, 0x00, 0x00,
}
